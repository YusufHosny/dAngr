# Generated from /workspaces/dAngr/src/dAngr/cli/grammar/dAngr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from .dAngrParser import dAngrParser


def serializedATN():
    return [
        4,0,70,407,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,203,8,11,
        1,12,1,12,1,12,1,12,1,12,1,13,3,13,211,8,13,1,13,1,13,5,13,215,8,
        13,10,13,12,13,218,9,13,1,14,4,14,221,8,14,11,14,12,14,222,1,15,
        1,15,1,15,1,15,4,15,229,8,15,11,15,12,15,230,1,16,4,16,234,8,16,
        11,16,12,16,235,1,17,1,17,1,18,4,18,241,8,18,11,18,12,18,242,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,5,24,
        271,8,24,10,24,12,24,274,9,24,1,24,1,24,1,24,1,24,5,24,280,8,24,
        10,24,12,24,283,9,24,1,24,3,24,286,8,24,1,25,1,25,1,25,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,301,8,27,10,27,12,27,
        304,9,27,1,27,5,27,307,8,27,10,27,12,27,310,9,27,1,27,1,27,1,28,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
        1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
        1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
        1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,
        1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,
        1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,
        1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,
        1,69,1,69,0,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,
        127,64,129,65,131,66,133,67,135,68,137,69,139,70,1,0,7,3,0,48,57,
        65,70,97,102,1,0,48,57,2,0,65,90,97,122,2,0,34,34,92,92,2,0,39,39,
        92,92,8,0,39,39,48,48,92,92,98,98,102,102,110,110,114,114,116,116,
        8,0,34,34,48,48,92,92,98,98,102,102,110,110,114,114,116,116,422,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
        0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,
        129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,
        0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,147,1,0,0,0,5,154,1,0,0,0,7,158,
        1,0,0,0,9,163,1,0,0,0,11,168,1,0,0,0,13,172,1,0,0,0,15,175,1,0,0,
        0,17,180,1,0,0,0,19,184,1,0,0,0,21,187,1,0,0,0,23,202,1,0,0,0,25,
        204,1,0,0,0,27,210,1,0,0,0,29,220,1,0,0,0,31,224,1,0,0,0,33,233,
        1,0,0,0,35,237,1,0,0,0,37,240,1,0,0,0,39,244,1,0,0,0,41,246,1,0,
        0,0,43,251,1,0,0,0,45,256,1,0,0,0,47,262,1,0,0,0,49,285,1,0,0,0,
        51,287,1,0,0,0,53,290,1,0,0,0,55,293,1,0,0,0,57,313,1,0,0,0,59,316,
        1,0,0,0,61,319,1,0,0,0,63,322,1,0,0,0,65,324,1,0,0,0,67,326,1,0,
        0,0,69,328,1,0,0,0,71,330,1,0,0,0,73,332,1,0,0,0,75,334,1,0,0,0,
        77,336,1,0,0,0,79,338,1,0,0,0,81,340,1,0,0,0,83,342,1,0,0,0,85,344,
        1,0,0,0,87,346,1,0,0,0,89,348,1,0,0,0,91,350,1,0,0,0,93,352,1,0,
        0,0,95,354,1,0,0,0,97,356,1,0,0,0,99,358,1,0,0,0,101,360,1,0,0,0,
        103,362,1,0,0,0,105,364,1,0,0,0,107,366,1,0,0,0,109,368,1,0,0,0,
        111,371,1,0,0,0,113,373,1,0,0,0,115,376,1,0,0,0,117,379,1,0,0,0,
        119,381,1,0,0,0,121,383,1,0,0,0,123,386,1,0,0,0,125,389,1,0,0,0,
        127,392,1,0,0,0,129,395,1,0,0,0,131,397,1,0,0,0,133,399,1,0,0,0,
        135,401,1,0,0,0,137,403,1,0,0,0,139,405,1,0,0,0,141,142,5,114,0,
        0,142,143,5,97,0,0,143,144,5,110,0,0,144,145,5,103,0,0,145,146,5,
        101,0,0,146,2,1,0,0,0,147,148,5,115,0,0,148,149,5,116,0,0,149,150,
        5,97,0,0,150,151,5,116,0,0,151,152,5,105,0,0,152,153,5,99,0,0,153,
        4,1,0,0,0,154,155,5,73,0,0,155,156,5,73,0,0,156,157,5,70,0,0,157,
        6,1,0,0,0,158,159,5,84,0,0,159,160,5,72,0,0,160,161,5,69,0,0,161,
        162,5,78,0,0,162,8,1,0,0,0,163,164,5,69,0,0,164,165,5,76,0,0,165,
        166,5,83,0,0,166,167,5,69,0,0,167,10,1,0,0,0,168,169,5,100,0,0,169,
        170,5,101,0,0,170,171,5,102,0,0,171,12,1,0,0,0,172,173,5,105,0,0,
        173,174,5,102,0,0,174,14,1,0,0,0,175,176,5,101,0,0,176,177,5,108,
        0,0,177,178,5,115,0,0,178,179,5,101,0,0,179,16,1,0,0,0,180,181,5,
        102,0,0,181,182,5,111,0,0,182,183,5,114,0,0,183,18,1,0,0,0,184,185,
        5,105,0,0,185,186,5,110,0,0,186,20,1,0,0,0,187,188,5,119,0,0,188,
        189,5,104,0,0,189,190,5,105,0,0,190,191,5,108,0,0,191,192,5,101,
        0,0,192,22,1,0,0,0,193,194,5,84,0,0,194,195,5,114,0,0,195,196,5,
        117,0,0,196,203,5,101,0,0,197,198,5,70,0,0,198,199,5,97,0,0,199,
        200,5,108,0,0,200,201,5,115,0,0,201,203,5,101,0,0,202,193,1,0,0,
        0,202,197,1,0,0,0,203,24,1,0,0,0,204,205,5,104,0,0,205,206,5,101,
        0,0,206,207,5,108,0,0,207,208,5,112,0,0,208,26,1,0,0,0,209,211,5,
        13,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,216,5,
        10,0,0,213,215,5,32,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,
        1,0,0,0,216,217,1,0,0,0,217,28,1,0,0,0,218,216,1,0,0,0,219,221,5,
        32,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,
        0,0,0,223,30,1,0,0,0,224,225,5,48,0,0,225,226,5,120,0,0,226,228,
        1,0,0,0,227,229,7,0,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,
        1,0,0,0,230,231,1,0,0,0,231,32,1,0,0,0,232,234,3,35,17,0,233,232,
        1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,34,1,
        0,0,0,237,238,7,1,0,0,238,36,1,0,0,0,239,241,3,39,19,0,240,239,1,
        0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,38,1,0,
        0,0,244,245,7,2,0,0,245,40,1,0,0,0,246,247,5,38,0,0,247,248,5,115,
        0,0,248,249,5,121,0,0,249,250,5,109,0,0,250,42,1,0,0,0,251,252,5,
        38,0,0,252,253,5,114,0,0,253,254,5,101,0,0,254,255,5,103,0,0,255,
        44,1,0,0,0,256,257,5,38,0,0,257,258,5,118,0,0,258,259,5,97,0,0,259,
        260,5,114,0,0,260,261,5,115,0,0,261,46,1,0,0,0,262,263,5,38,0,0,
        263,264,5,109,0,0,264,265,5,101,0,0,265,266,5,109,0,0,266,48,1,0,
        0,0,267,272,5,34,0,0,268,271,3,51,25,0,269,271,8,3,0,0,270,268,1,
        0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,
        0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,286,5,34,0,0,276,281,5,
        39,0,0,277,280,3,53,26,0,278,280,8,4,0,0,279,277,1,0,0,0,279,278,
        1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,
        1,0,0,0,283,281,1,0,0,0,284,286,5,39,0,0,285,267,1,0,0,0,285,276,
        1,0,0,0,286,50,1,0,0,0,287,288,5,92,0,0,288,289,3,59,29,0,289,52,
        1,0,0,0,290,291,5,92,0,0,291,292,3,57,28,0,292,54,1,0,0,0,293,294,
        5,98,0,0,294,308,5,39,0,0,295,307,3,59,29,0,296,297,5,92,0,0,297,
        298,5,120,0,0,298,302,1,0,0,0,299,301,7,1,0,0,300,299,1,0,0,0,301,
        304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,307,1,0,0,0,304,
        302,1,0,0,0,305,307,8,4,0,0,306,295,1,0,0,0,306,296,1,0,0,0,306,
        305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,
        311,1,0,0,0,310,308,1,0,0,0,311,312,5,39,0,0,312,56,1,0,0,0,313,
        314,5,92,0,0,314,315,7,5,0,0,315,58,1,0,0,0,316,317,5,92,0,0,317,
        318,7,6,0,0,318,60,1,0,0,0,319,320,5,45,0,0,320,321,5,62,0,0,321,
        62,1,0,0,0,322,323,5,40,0,0,323,64,1,0,0,0,324,325,5,41,0,0,325,
        66,1,0,0,0,326,327,5,33,0,0,327,68,1,0,0,0,328,329,5,38,0,0,329,
        70,1,0,0,0,330,331,5,36,0,0,331,72,1,0,0,0,332,333,5,58,0,0,333,
        74,1,0,0,0,334,335,5,59,0,0,335,76,1,0,0,0,336,337,5,44,0,0,337,
        78,1,0,0,0,338,339,5,34,0,0,339,80,1,0,0,0,340,341,5,39,0,0,341,
        82,1,0,0,0,342,343,5,64,0,0,343,84,1,0,0,0,344,345,5,46,0,0,345,
        86,1,0,0,0,346,347,5,124,0,0,347,88,1,0,0,0,348,349,5,91,0,0,349,
        90,1,0,0,0,350,351,5,93,0,0,351,92,1,0,0,0,352,353,5,123,0,0,353,
        94,1,0,0,0,354,355,5,125,0,0,355,96,1,0,0,0,356,357,5,94,0,0,357,
        98,1,0,0,0,358,359,5,35,0,0,359,100,1,0,0,0,360,361,5,37,0,0,361,
        102,1,0,0,0,362,363,5,42,0,0,363,104,1,0,0,0,364,365,5,43,0,0,365,
        106,1,0,0,0,366,367,5,47,0,0,367,108,1,0,0,0,368,369,5,42,0,0,369,
        370,5,42,0,0,370,110,1,0,0,0,371,372,5,61,0,0,372,112,1,0,0,0,373,
        374,5,61,0,0,374,375,5,61,0,0,375,114,1,0,0,0,376,377,5,33,0,0,377,
        378,5,61,0,0,378,116,1,0,0,0,379,380,5,60,0,0,380,118,1,0,0,0,381,
        382,5,62,0,0,382,120,1,0,0,0,383,384,5,60,0,0,384,385,5,61,0,0,385,
        122,1,0,0,0,386,387,5,62,0,0,387,388,5,61,0,0,388,124,1,0,0,0,389,
        390,5,38,0,0,390,391,5,38,0,0,391,126,1,0,0,0,392,393,5,124,0,0,
        393,394,5,124,0,0,394,128,1,0,0,0,395,396,5,63,0,0,396,130,1,0,0,
        0,397,398,5,126,0,0,398,132,1,0,0,0,399,400,5,96,0,0,400,134,1,0,
        0,0,401,402,5,95,0,0,402,136,1,0,0,0,403,404,5,45,0,0,404,138,1,
        0,0,0,405,406,3,137,68,0,406,140,1,0,0,0,16,0,202,210,216,222,230,
        235,242,270,272,279,281,285,302,306,308,0
    ]

class dAngrLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    STATIC = 2
    CIF = 3
    CTHEN = 4
    CELSE = 5
    DEF = 6
    IF = 7
    ELSE = 8
    FOR = 9
    IN = 10
    WHILE = 11
    BOOL = 12
    HELP = 13
    NEWLINE = 14
    WS = 15
    HEX_NUMBERS = 16
    NUMBERS = 17
    NUMBER = 18
    LETTERS = 19
    LETTER = 20
    SYM_DB = 21
    REG_DB = 22
    VARS_DB = 23
    MEM_DB = 24
    STRING = 25
    ESCAPED_QUOTE = 26
    ESCAPED_SINGLE_QUOTE = 27
    BINARY_STRING = 28
    SESC_SEQ = 29
    ESC_SEQ = 30
    ARROW = 31
    LPAREN = 32
    RPAREN = 33
    BANG = 34
    AMP = 35
    DOLLAR = 36
    COLON = 37
    SCOLON = 38
    COMMA = 39
    QUOTE = 40
    SQUOTE = 41
    AT = 42
    DOT = 43
    BAR = 44
    BRA = 45
    KET = 46
    BRACE = 47
    KETCE = 48
    HAT = 49
    HASH = 50
    PERC = 51
    TIMES = 52
    ADD = 53
    DIV = 54
    POW = 55
    ASSIGN = 56
    EQ = 57
    NEQ = 58
    LT = 59
    GT = 60
    LE = 61
    GE = 62
    AND = 63
    OR = 64
    QMARK = 65
    TILDE = 66
    TICK = 67
    UNDERSCORE = 68
    DASH = 69
    SUB = 70

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'range'", "'static'", "'IIF'", "'THEN'", "'ELSE'", "'def'", 
            "'if'", "'else'", "'for'", "'in'", "'while'", "'help'", "'&sym'", 
            "'&reg'", "'&vars'", "'&mem'", "'->'", "'('", "')'", "'!'", 
            "'&'", "'$'", "':'", "';'", "','", "'\"'", "'''", "'@'", "'.'", 
            "'|'", "'['", "']'", "'{'", "'}'", "'^'", "'#'", "'%'", "'*'", 
            "'+'", "'/'", "'**'", "'='", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'&&'", "'||'", "'?'", "'~'", "'`'", "'_'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "STATIC", "CIF", "CTHEN", "CELSE", "DEF", "IF", "ELSE", "FOR", 
            "IN", "WHILE", "BOOL", "HELP", "NEWLINE", "WS", "HEX_NUMBERS", 
            "NUMBERS", "NUMBER", "LETTERS", "LETTER", "SYM_DB", "REG_DB", 
            "VARS_DB", "MEM_DB", "STRING", "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", 
            "BINARY_STRING", "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", 
            "BANG", "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", 
            "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", 
            "HAT", "HASH", "PERC", "TIMES", "ADD", "DIV", "POW", "ASSIGN", 
            "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", 
            "TICK", "UNDERSCORE", "DASH", "SUB" ]

    ruleNames = [ "T__0", "STATIC", "CIF", "CTHEN", "CELSE", "DEF", "IF", 
                  "ELSE", "FOR", "IN", "WHILE", "BOOL", "HELP", "NEWLINE", 
                  "WS", "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", 
                  "SYM_DB", "REG_DB", "VARS_DB", "MEM_DB", "STRING", "ESCAPED_QUOTE", 
                  "ESCAPED_SINGLE_QUOTE", "BINARY_STRING", "SESC_SEQ", "ESC_SEQ", 
                  "ARROW", "LPAREN", "RPAREN", "BANG", "AMP", "DOLLAR", 
                  "COLON", "SCOLON", "COMMA", "QUOTE", "SQUOTE", "AT", "DOT", 
                  "BAR", "BRA", "KET", "BRACE", "KETCE", "HAT", "HASH", 
                  "PERC", "TIMES", "ADD", "DIV", "POW", "ASSIGN", "EQ", 
                  "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", 
                  "TICK", "UNDERSCORE", "DASH", "SUB" ]

    grammarFileName = "dAngr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class dAngrDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: dangr_Lexer = lexer

        def pull_token(self):
            return super(dAngrLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.dAngrDenter(self, self.NEWLINE, dAngrParser.INDENT, dAngrParser.DEDENT, False)
        return self.denter.next_token()



