# Generated from /workspaces/dAngr/src/dAngr/cli/grammar/dAngr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from .dAngrParser import dAngrParser


def serializedATN():
    return [
        4,0,74,436,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,3,11,211,8,11,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,3,14,226,8,14,1,14,1,14,
        5,14,230,8,14,10,14,12,14,233,9,14,1,15,4,15,236,8,15,11,15,12,15,
        237,1,16,1,16,1,16,1,16,4,16,244,8,16,11,16,12,16,245,1,17,4,17,
        249,8,17,11,17,12,17,250,1,18,1,18,1,19,4,19,256,8,19,11,19,12,19,
        257,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,5,26,293,8,26,10,26,12,26,
        296,9,26,1,26,1,26,1,26,1,26,5,26,302,8,26,10,26,12,26,305,9,26,
        1,26,3,26,308,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,5,29,323,8,29,10,29,12,29,326,9,29,1,29,5,29,
        329,8,29,10,29,12,29,332,9,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
        1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
        1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,61,
        1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,66,
        1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,
        1,71,1,72,1,72,1,73,1,73,0,0,74,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
        61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,
        141,71,143,72,145,73,147,74,1,0,7,3,0,48,57,65,70,97,102,1,0,48,
        57,2,0,65,90,97,122,2,0,34,34,92,92,2,0,39,39,92,92,8,0,39,39,48,
        48,92,92,98,98,102,102,110,110,114,114,116,116,8,0,34,34,48,48,92,
        92,98,98,102,102,110,110,114,114,116,116,451,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
        0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
        1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,
        0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,
        0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,
        141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,1,149,1,0,
        0,0,3,155,1,0,0,0,5,162,1,0,0,0,7,166,1,0,0,0,9,171,1,0,0,0,11,176,
        1,0,0,0,13,180,1,0,0,0,15,183,1,0,0,0,17,188,1,0,0,0,19,192,1,0,
        0,0,21,195,1,0,0,0,23,210,1,0,0,0,25,212,1,0,0,0,27,217,1,0,0,0,
        29,225,1,0,0,0,31,235,1,0,0,0,33,239,1,0,0,0,35,248,1,0,0,0,37,252,
        1,0,0,0,39,255,1,0,0,0,41,259,1,0,0,0,43,261,1,0,0,0,45,266,1,0,
        0,0,47,271,1,0,0,0,49,277,1,0,0,0,51,282,1,0,0,0,53,307,1,0,0,0,
        55,309,1,0,0,0,57,312,1,0,0,0,59,315,1,0,0,0,61,335,1,0,0,0,63,338,
        1,0,0,0,65,341,1,0,0,0,67,344,1,0,0,0,69,346,1,0,0,0,71,348,1,0,
        0,0,73,350,1,0,0,0,75,352,1,0,0,0,77,354,1,0,0,0,79,356,1,0,0,0,
        81,358,1,0,0,0,83,360,1,0,0,0,85,362,1,0,0,0,87,364,1,0,0,0,89,366,
        1,0,0,0,91,368,1,0,0,0,93,370,1,0,0,0,95,372,1,0,0,0,97,374,1,0,
        0,0,99,376,1,0,0,0,101,378,1,0,0,0,103,380,1,0,0,0,105,382,1,0,0,
        0,107,384,1,0,0,0,109,386,1,0,0,0,111,388,1,0,0,0,113,390,1,0,0,
        0,115,393,1,0,0,0,117,396,1,0,0,0,119,399,1,0,0,0,121,402,1,0,0,
        0,123,404,1,0,0,0,125,407,1,0,0,0,127,410,1,0,0,0,129,412,1,0,0,
        0,131,414,1,0,0,0,133,417,1,0,0,0,135,420,1,0,0,0,137,423,1,0,0,
        0,139,426,1,0,0,0,141,428,1,0,0,0,143,430,1,0,0,0,145,432,1,0,0,
        0,147,434,1,0,0,0,149,150,5,114,0,0,150,151,5,97,0,0,151,152,5,110,
        0,0,152,153,5,103,0,0,153,154,5,101,0,0,154,2,1,0,0,0,155,156,5,
        115,0,0,156,157,5,116,0,0,157,158,5,97,0,0,158,159,5,116,0,0,159,
        160,5,105,0,0,160,161,5,99,0,0,161,4,1,0,0,0,162,163,5,73,0,0,163,
        164,5,73,0,0,164,165,5,70,0,0,165,6,1,0,0,0,166,167,5,84,0,0,167,
        168,5,72,0,0,168,169,5,69,0,0,169,170,5,78,0,0,170,8,1,0,0,0,171,
        172,5,69,0,0,172,173,5,76,0,0,173,174,5,83,0,0,174,175,5,69,0,0,
        175,10,1,0,0,0,176,177,5,100,0,0,177,178,5,101,0,0,178,179,5,102,
        0,0,179,12,1,0,0,0,180,181,5,105,0,0,181,182,5,102,0,0,182,14,1,
        0,0,0,183,184,5,101,0,0,184,185,5,108,0,0,185,186,5,115,0,0,186,
        187,5,101,0,0,187,16,1,0,0,0,188,189,5,102,0,0,189,190,5,111,0,0,
        190,191,5,114,0,0,191,18,1,0,0,0,192,193,5,105,0,0,193,194,5,110,
        0,0,194,20,1,0,0,0,195,196,5,119,0,0,196,197,5,104,0,0,197,198,5,
        105,0,0,198,199,5,108,0,0,199,200,5,101,0,0,200,22,1,0,0,0,201,202,
        5,84,0,0,202,203,5,114,0,0,203,204,5,117,0,0,204,211,5,101,0,0,205,
        206,5,70,0,0,206,207,5,97,0,0,207,208,5,108,0,0,208,209,5,115,0,
        0,209,211,5,101,0,0,210,201,1,0,0,0,210,205,1,0,0,0,211,24,1,0,0,
        0,212,213,5,104,0,0,213,214,5,101,0,0,214,215,5,108,0,0,215,216,
        5,112,0,0,216,26,1,0,0,0,217,218,5,114,0,0,218,219,5,101,0,0,219,
        220,5,116,0,0,220,221,5,117,0,0,221,222,5,114,0,0,222,223,5,110,
        0,0,223,28,1,0,0,0,224,226,5,13,0,0,225,224,1,0,0,0,225,226,1,0,
        0,0,226,227,1,0,0,0,227,231,5,10,0,0,228,230,5,32,0,0,229,228,1,
        0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,30,1,0,
        0,0,233,231,1,0,0,0,234,236,5,32,0,0,235,234,1,0,0,0,236,237,1,0,
        0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,32,1,0,0,0,239,240,5,48,
        0,0,240,241,5,120,0,0,241,243,1,0,0,0,242,244,7,0,0,0,243,242,1,
        0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,34,1,0,
        0,0,247,249,3,37,18,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,
        0,0,0,250,251,1,0,0,0,251,36,1,0,0,0,252,253,7,1,0,0,253,38,1,0,
        0,0,254,256,3,41,20,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,1,
        0,0,0,257,258,1,0,0,0,258,40,1,0,0,0,259,260,7,2,0,0,260,42,1,0,
        0,0,261,262,5,38,0,0,262,263,5,115,0,0,263,264,5,121,0,0,264,265,
        5,109,0,0,265,44,1,0,0,0,266,267,5,38,0,0,267,268,5,114,0,0,268,
        269,5,101,0,0,269,270,5,103,0,0,270,46,1,0,0,0,271,272,5,38,0,0,
        272,273,5,118,0,0,273,274,5,97,0,0,274,275,5,114,0,0,275,276,5,115,
        0,0,276,48,1,0,0,0,277,278,5,38,0,0,278,279,5,109,0,0,279,280,5,
        101,0,0,280,281,5,109,0,0,281,50,1,0,0,0,282,283,5,38,0,0,283,284,
        5,115,0,0,284,285,5,116,0,0,285,286,5,97,0,0,286,287,5,116,0,0,287,
        288,5,101,0,0,288,52,1,0,0,0,289,294,5,34,0,0,290,293,3,55,27,0,
        291,293,8,3,0,0,292,290,1,0,0,0,292,291,1,0,0,0,293,296,1,0,0,0,
        294,292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,294,1,0,0,0,
        297,308,5,34,0,0,298,303,5,39,0,0,299,302,3,57,28,0,300,302,8,4,
        0,0,301,299,1,0,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,
        0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,308,5,39,
        0,0,307,289,1,0,0,0,307,298,1,0,0,0,308,54,1,0,0,0,309,310,5,92,
        0,0,310,311,3,63,31,0,311,56,1,0,0,0,312,313,5,92,0,0,313,314,3,
        61,30,0,314,58,1,0,0,0,315,316,5,98,0,0,316,330,5,39,0,0,317,329,
        3,63,31,0,318,319,5,92,0,0,319,320,5,120,0,0,320,324,1,0,0,0,321,
        323,7,1,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,
        325,1,0,0,0,325,329,1,0,0,0,326,324,1,0,0,0,327,329,8,4,0,0,328,
        317,1,0,0,0,328,318,1,0,0,0,328,327,1,0,0,0,329,332,1,0,0,0,330,
        328,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,
        334,5,39,0,0,334,60,1,0,0,0,335,336,5,92,0,0,336,337,7,5,0,0,337,
        62,1,0,0,0,338,339,5,92,0,0,339,340,7,6,0,0,340,64,1,0,0,0,341,342,
        5,45,0,0,342,343,5,62,0,0,343,66,1,0,0,0,344,345,5,40,0,0,345,68,
        1,0,0,0,346,347,5,41,0,0,347,70,1,0,0,0,348,349,5,33,0,0,349,72,
        1,0,0,0,350,351,5,38,0,0,351,74,1,0,0,0,352,353,5,36,0,0,353,76,
        1,0,0,0,354,355,5,58,0,0,355,78,1,0,0,0,356,357,5,59,0,0,357,80,
        1,0,0,0,358,359,5,44,0,0,359,82,1,0,0,0,360,361,5,34,0,0,361,84,
        1,0,0,0,362,363,5,39,0,0,363,86,1,0,0,0,364,365,5,64,0,0,365,88,
        1,0,0,0,366,367,5,46,0,0,367,90,1,0,0,0,368,369,5,124,0,0,369,92,
        1,0,0,0,370,371,5,91,0,0,371,94,1,0,0,0,372,373,5,93,0,0,373,96,
        1,0,0,0,374,375,5,123,0,0,375,98,1,0,0,0,376,377,5,125,0,0,377,100,
        1,0,0,0,378,379,5,94,0,0,379,102,1,0,0,0,380,381,5,35,0,0,381,104,
        1,0,0,0,382,383,5,37,0,0,383,106,1,0,0,0,384,385,5,42,0,0,385,108,
        1,0,0,0,386,387,5,43,0,0,387,110,1,0,0,0,388,389,5,47,0,0,389,112,
        1,0,0,0,390,391,5,47,0,0,391,392,5,47,0,0,392,114,1,0,0,0,393,394,
        5,60,0,0,394,395,5,60,0,0,395,116,1,0,0,0,396,397,5,62,0,0,397,398,
        5,62,0,0,398,118,1,0,0,0,399,400,5,42,0,0,400,401,5,42,0,0,401,120,
        1,0,0,0,402,403,5,61,0,0,403,122,1,0,0,0,404,405,5,61,0,0,405,406,
        5,61,0,0,406,124,1,0,0,0,407,408,5,33,0,0,408,409,5,61,0,0,409,126,
        1,0,0,0,410,411,5,60,0,0,411,128,1,0,0,0,412,413,5,62,0,0,413,130,
        1,0,0,0,414,415,5,60,0,0,415,416,5,61,0,0,416,132,1,0,0,0,417,418,
        5,62,0,0,418,419,5,61,0,0,419,134,1,0,0,0,420,421,5,38,0,0,421,422,
        5,38,0,0,422,136,1,0,0,0,423,424,5,124,0,0,424,425,5,124,0,0,425,
        138,1,0,0,0,426,427,5,63,0,0,427,140,1,0,0,0,428,429,5,126,0,0,429,
        142,1,0,0,0,430,431,5,96,0,0,431,144,1,0,0,0,432,433,5,95,0,0,433,
        146,1,0,0,0,434,435,5,45,0,0,435,148,1,0,0,0,16,0,210,225,231,237,
        245,250,257,292,294,301,303,307,324,328,330,0
    ]

class dAngrLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    STATIC = 2
    CIF = 3
    CTHEN = 4
    CELSE = 5
    DEF = 6
    IF = 7
    ELSE = 8
    FOR = 9
    IN = 10
    WHILE = 11
    BOOL = 12
    HELP = 13
    RETURN = 14
    NEWLINE = 15
    WS = 16
    HEX_NUMBERS = 17
    NUMBERS = 18
    NUMBER = 19
    LETTERS = 20
    LETTER = 21
    SYM_DB = 22
    REG_DB = 23
    VARS_DB = 24
    MEM_DB = 25
    STATE = 26
    STRING = 27
    ESCAPED_QUOTE = 28
    ESCAPED_SINGLE_QUOTE = 29
    BINARY_STRING = 30
    SESC_SEQ = 31
    ESC_SEQ = 32
    ARROW = 33
    LPAREN = 34
    RPAREN = 35
    BANG = 36
    AMP = 37
    DOLLAR = 38
    COLON = 39
    SCOLON = 40
    COMMA = 41
    QUOTE = 42
    SQUOTE = 43
    AT = 44
    DOT = 45
    BAR = 46
    BRA = 47
    KET = 48
    BRACE = 49
    KETCE = 50
    HAT = 51
    HASH = 52
    PERC = 53
    MUL = 54
    ADD = 55
    DIV = 56
    FLOORDIV = 57
    LSHIFT = 58
    RSHIFT = 59
    POW = 60
    ASSIGN = 61
    EQ = 62
    NEQ = 63
    LT = 64
    GT = 65
    LE = 66
    GE = 67
    AND = 68
    OR = 69
    QMARK = 70
    TILDE = 71
    TICK = 72
    UNDERSCORE = 73
    DASH = 74

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'range'", "'static'", "'IIF'", "'THEN'", "'ELSE'", "'def'", 
            "'if'", "'else'", "'for'", "'in'", "'while'", "'help'", "'return'", 
            "'&sym'", "'&reg'", "'&vars'", "'&mem'", "'&state'", "'->'", 
            "'('", "')'", "'!'", "'&'", "'$'", "':'", "';'", "','", "'\"'", 
            "'''", "'@'", "'.'", "'|'", "'['", "']'", "'{'", "'}'", "'^'", 
            "'#'", "'%'", "'*'", "'+'", "'/'", "'//'", "'<<'", "'>>'", "'**'", 
            "'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", 
            "'||'", "'?'", "'~'", "'`'", "'_'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "STATIC", "CIF", "CTHEN", "CELSE", "DEF", "IF", "ELSE", "FOR", 
            "IN", "WHILE", "BOOL", "HELP", "RETURN", "NEWLINE", "WS", "HEX_NUMBERS", 
            "NUMBERS", "NUMBER", "LETTERS", "LETTER", "SYM_DB", "REG_DB", 
            "VARS_DB", "MEM_DB", "STATE", "STRING", "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", 
            "BINARY_STRING", "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", 
            "BANG", "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", 
            "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", 
            "HAT", "HASH", "PERC", "MUL", "ADD", "DIV", "FLOORDIV", "LSHIFT", 
            "RSHIFT", "POW", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", 
            "AND", "OR", "QMARK", "TILDE", "TICK", "UNDERSCORE", "DASH" ]

    ruleNames = [ "T__0", "STATIC", "CIF", "CTHEN", "CELSE", "DEF", "IF", 
                  "ELSE", "FOR", "IN", "WHILE", "BOOL", "HELP", "RETURN", 
                  "NEWLINE", "WS", "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", 
                  "LETTER", "SYM_DB", "REG_DB", "VARS_DB", "MEM_DB", "STATE", 
                  "STRING", "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", "BINARY_STRING", 
                  "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", "BANG", 
                  "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", 
                  "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", 
                  "HAT", "HASH", "PERC", "MUL", "ADD", "DIV", "FLOORDIV", 
                  "LSHIFT", "RSHIFT", "POW", "ASSIGN", "EQ", "NEQ", "LT", 
                  "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", "TICK", 
                  "UNDERSCORE", "DASH" ]

    grammarFileName = "dAngr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class dAngrDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: dangr_Lexer = lexer

        def pull_token(self):
            return super(dAngrLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.dAngrDenter(self, self.NEWLINE, dAngrParser.INDENT, dAngrParser.DEDENT, False)
        return self.denter.next_token()



