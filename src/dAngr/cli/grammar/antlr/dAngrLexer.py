# Generated from /workspaces/dAngr/src/dAngr/cli/grammar/dAngr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from .dAngrParser import dAngrParser


def serializedATN():
    return [
        4,0,76,458,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,215,8,11,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,3,16,245,8,16,1,16,1,16,5,16,249,8,16,10,16,12,16,252,9,16,
        1,17,4,17,255,8,17,11,17,12,17,256,1,18,1,18,1,18,1,18,4,18,263,
        8,18,11,18,12,18,264,1,19,4,19,268,8,19,11,19,12,19,269,1,20,1,20,
        1,21,4,21,275,8,21,11,21,12,21,276,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,28,5,28,315,8,28,10,28,12,28,318,9,28,1,28,5,28,
        321,8,28,10,28,12,28,324,9,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,5,28,334,8,28,10,28,12,28,337,9,28,1,28,5,28,340,8,28,10,28,
        12,28,343,9,28,1,28,1,28,3,28,347,8,28,1,29,1,29,1,29,1,30,1,30,
        1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,
        1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,
        1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,
        1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,
        1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,
        1,69,1,70,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,
        1,75,0,0,76,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
        109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
        64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,
        147,74,149,75,151,76,1,0,7,3,0,48,57,65,70,97,102,1,0,48,57,2,0,
        65,90,97,122,1,0,34,34,1,0,39,39,3,0,39,39,48,48,92,92,3,0,34,34,
        48,48,92,92,473,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
        0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
        0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
        1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
        0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
        0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,
        145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,1,153,1,0,
        0,0,3,160,1,0,0,0,5,164,1,0,0,0,7,169,1,0,0,0,9,174,1,0,0,0,11,180,
        1,0,0,0,13,184,1,0,0,0,15,187,1,0,0,0,17,192,1,0,0,0,19,196,1,0,
        0,0,21,199,1,0,0,0,23,214,1,0,0,0,25,216,1,0,0,0,27,221,1,0,0,0,
        29,228,1,0,0,0,31,234,1,0,0,0,33,244,1,0,0,0,35,254,1,0,0,0,37,258,
        1,0,0,0,39,267,1,0,0,0,41,271,1,0,0,0,43,274,1,0,0,0,45,278,1,0,
        0,0,47,280,1,0,0,0,49,285,1,0,0,0,51,290,1,0,0,0,53,296,1,0,0,0,
        55,301,1,0,0,0,57,346,1,0,0,0,59,348,1,0,0,0,61,351,1,0,0,0,63,354,
        1,0,0,0,65,357,1,0,0,0,67,360,1,0,0,0,69,363,1,0,0,0,71,366,1,0,
        0,0,73,368,1,0,0,0,75,370,1,0,0,0,77,372,1,0,0,0,79,374,1,0,0,0,
        81,376,1,0,0,0,83,378,1,0,0,0,85,380,1,0,0,0,87,382,1,0,0,0,89,384,
        1,0,0,0,91,386,1,0,0,0,93,388,1,0,0,0,95,390,1,0,0,0,97,392,1,0,
        0,0,99,394,1,0,0,0,101,396,1,0,0,0,103,398,1,0,0,0,105,400,1,0,0,
        0,107,402,1,0,0,0,109,404,1,0,0,0,111,406,1,0,0,0,113,408,1,0,0,
        0,115,410,1,0,0,0,117,412,1,0,0,0,119,415,1,0,0,0,121,418,1,0,0,
        0,123,421,1,0,0,0,125,424,1,0,0,0,127,426,1,0,0,0,129,429,1,0,0,
        0,131,432,1,0,0,0,133,434,1,0,0,0,135,436,1,0,0,0,137,439,1,0,0,
        0,139,442,1,0,0,0,141,445,1,0,0,0,143,448,1,0,0,0,145,450,1,0,0,
        0,147,452,1,0,0,0,149,454,1,0,0,0,151,456,1,0,0,0,153,154,5,115,
        0,0,154,155,5,116,0,0,155,156,5,97,0,0,156,157,5,116,0,0,157,158,
        5,105,0,0,158,159,5,99,0,0,159,2,1,0,0,0,160,161,5,73,0,0,161,162,
        5,73,0,0,162,163,5,70,0,0,163,4,1,0,0,0,164,165,5,84,0,0,165,166,
        5,72,0,0,166,167,5,69,0,0,167,168,5,78,0,0,168,6,1,0,0,0,169,170,
        5,69,0,0,170,171,5,76,0,0,171,172,5,83,0,0,172,173,5,69,0,0,173,
        8,1,0,0,0,174,175,5,114,0,0,175,176,5,97,0,0,176,177,5,110,0,0,177,
        178,5,103,0,0,178,179,5,101,0,0,179,10,1,0,0,0,180,181,5,100,0,0,
        181,182,5,101,0,0,182,183,5,102,0,0,183,12,1,0,0,0,184,185,5,105,
        0,0,185,186,5,102,0,0,186,14,1,0,0,0,187,188,5,101,0,0,188,189,5,
        108,0,0,189,190,5,115,0,0,190,191,5,101,0,0,191,16,1,0,0,0,192,193,
        5,102,0,0,193,194,5,111,0,0,194,195,5,114,0,0,195,18,1,0,0,0,196,
        197,5,105,0,0,197,198,5,110,0,0,198,20,1,0,0,0,199,200,5,119,0,0,
        200,201,5,104,0,0,201,202,5,105,0,0,202,203,5,108,0,0,203,204,5,
        101,0,0,204,22,1,0,0,0,205,206,5,84,0,0,206,207,5,114,0,0,207,208,
        5,117,0,0,208,215,5,101,0,0,209,210,5,70,0,0,210,211,5,97,0,0,211,
        212,5,108,0,0,212,213,5,115,0,0,213,215,5,101,0,0,214,205,1,0,0,
        0,214,209,1,0,0,0,215,24,1,0,0,0,216,217,5,104,0,0,217,218,5,101,
        0,0,218,219,5,108,0,0,219,220,5,112,0,0,220,26,1,0,0,0,221,222,5,
        114,0,0,222,223,5,101,0,0,223,224,5,116,0,0,224,225,5,117,0,0,225,
        226,5,114,0,0,226,227,5,110,0,0,227,28,1,0,0,0,228,229,5,98,0,0,
        229,230,5,114,0,0,230,231,5,101,0,0,231,232,5,97,0,0,232,233,5,107,
        0,0,233,30,1,0,0,0,234,235,5,99,0,0,235,236,5,111,0,0,236,237,5,
        110,0,0,237,238,5,116,0,0,238,239,5,105,0,0,239,240,5,110,0,0,240,
        241,5,117,0,0,241,242,5,101,0,0,242,32,1,0,0,0,243,245,5,13,0,0,
        244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,250,5,10,0,0,
        247,249,5,32,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,
        250,251,1,0,0,0,251,34,1,0,0,0,252,250,1,0,0,0,253,255,5,32,0,0,
        254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,
        257,36,1,0,0,0,258,259,5,48,0,0,259,260,5,120,0,0,260,262,1,0,0,
        0,261,263,7,0,0,0,262,261,1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,
        0,264,265,1,0,0,0,265,38,1,0,0,0,266,268,3,41,20,0,267,266,1,0,0,
        0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,40,1,0,0,0,
        271,272,7,1,0,0,272,42,1,0,0,0,273,275,3,45,22,0,274,273,1,0,0,0,
        275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,44,1,0,0,0,278,
        279,7,2,0,0,279,46,1,0,0,0,280,281,5,38,0,0,281,282,5,115,0,0,282,
        283,5,121,0,0,283,284,5,109,0,0,284,48,1,0,0,0,285,286,5,38,0,0,
        286,287,5,114,0,0,287,288,5,101,0,0,288,289,5,103,0,0,289,50,1,0,
        0,0,290,291,5,38,0,0,291,292,5,118,0,0,292,293,5,97,0,0,293,294,
        5,114,0,0,294,295,5,115,0,0,295,52,1,0,0,0,296,297,5,38,0,0,297,
        298,5,109,0,0,298,299,5,101,0,0,299,300,5,109,0,0,300,54,1,0,0,0,
        301,302,5,38,0,0,302,303,5,115,0,0,303,304,5,116,0,0,304,305,5,97,
        0,0,305,306,5,116,0,0,306,307,5,101,0,0,307,56,1,0,0,0,308,322,3,
        87,43,0,309,321,3,61,30,0,310,311,5,92,0,0,311,312,5,120,0,0,312,
        316,1,0,0,0,313,315,7,1,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,
        314,1,0,0,0,316,317,1,0,0,0,317,321,1,0,0,0,318,316,1,0,0,0,319,
        321,8,3,0,0,320,309,1,0,0,0,320,310,1,0,0,0,320,319,1,0,0,0,321,
        324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,
        322,1,0,0,0,325,326,3,87,43,0,326,347,1,0,0,0,327,341,3,89,44,0,
        328,340,3,63,31,0,329,330,5,92,0,0,330,331,5,120,0,0,331,335,1,0,
        0,0,332,334,7,1,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,
        0,0,335,336,1,0,0,0,336,340,1,0,0,0,337,335,1,0,0,0,338,340,8,4,
        0,0,339,328,1,0,0,0,339,329,1,0,0,0,339,338,1,0,0,0,340,343,1,0,
        0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,
        0,0,344,345,3,89,44,0,345,347,1,0,0,0,346,308,1,0,0,0,346,327,1,
        0,0,0,347,58,1,0,0,0,348,349,5,98,0,0,349,350,3,57,28,0,350,60,1,
        0,0,0,351,352,5,92,0,0,352,353,3,67,33,0,353,62,1,0,0,0,354,355,
        5,92,0,0,355,356,3,65,32,0,356,64,1,0,0,0,357,358,5,92,0,0,358,359,
        7,5,0,0,359,66,1,0,0,0,360,361,5,92,0,0,361,362,7,6,0,0,362,68,1,
        0,0,0,363,364,5,45,0,0,364,365,5,62,0,0,365,70,1,0,0,0,366,367,5,
        40,0,0,367,72,1,0,0,0,368,369,5,41,0,0,369,74,1,0,0,0,370,371,5,
        33,0,0,371,76,1,0,0,0,372,373,5,38,0,0,373,78,1,0,0,0,374,375,5,
        36,0,0,375,80,1,0,0,0,376,377,5,58,0,0,377,82,1,0,0,0,378,379,5,
        59,0,0,379,84,1,0,0,0,380,381,5,44,0,0,381,86,1,0,0,0,382,383,5,
        34,0,0,383,88,1,0,0,0,384,385,5,39,0,0,385,90,1,0,0,0,386,387,5,
        64,0,0,387,92,1,0,0,0,388,389,5,46,0,0,389,94,1,0,0,0,390,391,5,
        124,0,0,391,96,1,0,0,0,392,393,5,91,0,0,393,98,1,0,0,0,394,395,5,
        93,0,0,395,100,1,0,0,0,396,397,5,123,0,0,397,102,1,0,0,0,398,399,
        5,125,0,0,399,104,1,0,0,0,400,401,5,94,0,0,401,106,1,0,0,0,402,403,
        5,35,0,0,403,108,1,0,0,0,404,405,5,37,0,0,405,110,1,0,0,0,406,407,
        5,42,0,0,407,112,1,0,0,0,408,409,5,43,0,0,409,114,1,0,0,0,410,411,
        5,47,0,0,411,116,1,0,0,0,412,413,5,47,0,0,413,414,5,47,0,0,414,118,
        1,0,0,0,415,416,5,60,0,0,416,417,5,60,0,0,417,120,1,0,0,0,418,419,
        5,62,0,0,419,420,5,62,0,0,420,122,1,0,0,0,421,422,5,42,0,0,422,423,
        5,42,0,0,423,124,1,0,0,0,424,425,5,61,0,0,425,126,1,0,0,0,426,427,
        5,61,0,0,427,428,5,61,0,0,428,128,1,0,0,0,429,430,5,33,0,0,430,431,
        5,61,0,0,431,130,1,0,0,0,432,433,5,60,0,0,433,132,1,0,0,0,434,435,
        5,62,0,0,435,134,1,0,0,0,436,437,5,60,0,0,437,438,5,61,0,0,438,136,
        1,0,0,0,439,440,5,62,0,0,440,441,5,61,0,0,441,138,1,0,0,0,442,443,
        5,38,0,0,443,444,5,38,0,0,444,140,1,0,0,0,445,446,5,124,0,0,446,
        447,5,124,0,0,447,142,1,0,0,0,448,449,5,63,0,0,449,144,1,0,0,0,450,
        451,5,126,0,0,451,146,1,0,0,0,452,453,5,96,0,0,453,148,1,0,0,0,454,
        455,5,95,0,0,455,150,1,0,0,0,456,457,5,45,0,0,457,152,1,0,0,0,15,
        0,214,244,250,256,264,269,276,316,320,322,335,339,341,346,0
    ]

class dAngrLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STATIC = 1
    CIF = 2
    CTHEN = 3
    CELSE = 4
    RANGE = 5
    DEF = 6
    IF = 7
    ELSE = 8
    FOR = 9
    IN = 10
    WHILE = 11
    BOOL = 12
    HELP = 13
    RETURN = 14
    BREAK = 15
    CONTINUE = 16
    NEWLINE = 17
    WS = 18
    HEX_NUMBERS = 19
    NUMBERS = 20
    NUMBER = 21
    LETTERS = 22
    LETTER = 23
    SYM_DB = 24
    REG_DB = 25
    VARS_DB = 26
    MEM_DB = 27
    STATE = 28
    STRING = 29
    BINARY_STRING = 30
    ESCAPED_QUOTE = 31
    ESCAPED_SINGLE_QUOTE = 32
    SESC_SEQ = 33
    ESC_SEQ = 34
    ARROW = 35
    LPAREN = 36
    RPAREN = 37
    BANG = 38
    AMP = 39
    DOLLAR = 40
    COLON = 41
    SCOLON = 42
    COMMA = 43
    QUOTE = 44
    SQUOTE = 45
    AT = 46
    DOT = 47
    BAR = 48
    BRA = 49
    KET = 50
    BRACE = 51
    KETCE = 52
    HAT = 53
    HASH = 54
    PERC = 55
    MUL = 56
    ADD = 57
    DIV = 58
    FLOORDIV = 59
    LSHIFT = 60
    RSHIFT = 61
    POW = 62
    ASSIGN = 63
    EQ = 64
    NEQ = 65
    LT = 66
    GT = 67
    LE = 68
    GE = 69
    AND = 70
    OR = 71
    QMARK = 72
    TILDE = 73
    TICK = 74
    UNDERSCORE = 75
    DASH = 76

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'static'", "'IIF'", "'THEN'", "'ELSE'", "'range'", "'def'", 
            "'if'", "'else'", "'for'", "'in'", "'while'", "'help'", "'return'", 
            "'break'", "'continue'", "'&sym'", "'&reg'", "'&vars'", "'&mem'", 
            "'&state'", "'->'", "'('", "')'", "'!'", "'&'", "'$'", "':'", 
            "';'", "','", "'\"'", "'''", "'@'", "'.'", "'|'", "'['", "']'", 
            "'{'", "'}'", "'^'", "'#'", "'%'", "'*'", "'+'", "'/'", "'//'", 
            "'<<'", "'>>'", "'**'", "'='", "'=='", "'!='", "'<'", "'>'", 
            "'<='", "'>='", "'&&'", "'||'", "'?'", "'~'", "'`'", "'_'", 
            "'-'" ]

    symbolicNames = [ "<INVALID>",
            "STATIC", "CIF", "CTHEN", "CELSE", "RANGE", "DEF", "IF", "ELSE", 
            "FOR", "IN", "WHILE", "BOOL", "HELP", "RETURN", "BREAK", "CONTINUE", 
            "NEWLINE", "WS", "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", 
            "LETTER", "SYM_DB", "REG_DB", "VARS_DB", "MEM_DB", "STATE", 
            "STRING", "BINARY_STRING", "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", 
            "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", "BANG", 
            "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", "SQUOTE", 
            "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", "HAT", "HASH", 
            "PERC", "MUL", "ADD", "DIV", "FLOORDIV", "LSHIFT", "RSHIFT", 
            "POW", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", 
            "OR", "QMARK", "TILDE", "TICK", "UNDERSCORE", "DASH" ]

    ruleNames = [ "STATIC", "CIF", "CTHEN", "CELSE", "RANGE", "DEF", "IF", 
                  "ELSE", "FOR", "IN", "WHILE", "BOOL", "HELP", "RETURN", 
                  "BREAK", "CONTINUE", "NEWLINE", "WS", "HEX_NUMBERS", "NUMBERS", 
                  "NUMBER", "LETTERS", "LETTER", "SYM_DB", "REG_DB", "VARS_DB", 
                  "MEM_DB", "STATE", "STRING", "BINARY_STRING", "ESCAPED_QUOTE", 
                  "ESCAPED_SINGLE_QUOTE", "SESC_SEQ", "ESC_SEQ", "ARROW", 
                  "LPAREN", "RPAREN", "BANG", "AMP", "DOLLAR", "COLON", 
                  "SCOLON", "COMMA", "QUOTE", "SQUOTE", "AT", "DOT", "BAR", 
                  "BRA", "KET", "BRACE", "KETCE", "HAT", "HASH", "PERC", 
                  "MUL", "ADD", "DIV", "FLOORDIV", "LSHIFT", "RSHIFT", "POW", 
                  "ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", 
                  "OR", "QMARK", "TILDE", "TICK", "UNDERSCORE", "DASH" ]

    grammarFileName = "dAngr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class dAngrDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: dangr_Lexer = lexer

        def pull_token(self):
            return super(dAngrLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.dAngrDenter(self, self.NEWLINE, dAngrParser.INDENT, dAngrParser.DEDENT, False)
        return self.denter.next_token()



