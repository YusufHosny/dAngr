# Generated from /workspaces/dAngr/src/dAngr/cli/grammar/lex.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,58,317,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,0,1,0,4,0,122,8,0,11,0,12,0,123,1,1,4,1,127,8,1,11,1,12,1,128,
        1,2,1,2,1,3,4,3,134,8,3,11,3,12,3,135,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,5,10,171,8,10,10,10,
        12,10,174,9,10,1,10,1,10,1,10,1,10,5,10,180,8,10,10,10,12,10,183,
        9,10,1,10,3,10,186,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,5,13,201,8,13,10,13,12,13,204,9,13,1,13,
        5,13,207,8,13,10,13,12,13,210,9,13,1,13,1,13,1,14,1,14,1,14,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
        1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,
        1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,
        1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,
        3,56,309,8,56,1,56,1,56,1,57,4,57,314,8,57,11,57,12,57,315,0,0,58,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
        113,57,115,58,1,0,8,3,0,48,57,65,70,97,102,1,0,48,57,2,0,65,90,97,
        122,2,0,34,34,92,92,2,0,39,39,92,92,8,0,39,39,48,48,92,92,98,98,
        102,102,110,110,114,114,116,116,8,0,34,34,48,48,92,92,98,98,102,
        102,110,110,114,114,116,116,2,0,9,9,32,32,330,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
        113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,126,1,0,0,0,5,130,1,0,
        0,0,7,133,1,0,0,0,9,137,1,0,0,0,11,139,1,0,0,0,13,144,1,0,0,0,15,
        149,1,0,0,0,17,155,1,0,0,0,19,160,1,0,0,0,21,185,1,0,0,0,23,187,
        1,0,0,0,25,190,1,0,0,0,27,193,1,0,0,0,29,213,1,0,0,0,31,216,1,0,
        0,0,33,219,1,0,0,0,35,222,1,0,0,0,37,224,1,0,0,0,39,226,1,0,0,0,
        41,228,1,0,0,0,43,230,1,0,0,0,45,232,1,0,0,0,47,234,1,0,0,0,49,236,
        1,0,0,0,51,238,1,0,0,0,53,240,1,0,0,0,55,242,1,0,0,0,57,244,1,0,
        0,0,59,246,1,0,0,0,61,248,1,0,0,0,63,250,1,0,0,0,65,252,1,0,0,0,
        67,254,1,0,0,0,69,256,1,0,0,0,71,258,1,0,0,0,73,260,1,0,0,0,75,262,
        1,0,0,0,77,264,1,0,0,0,79,266,1,0,0,0,81,268,1,0,0,0,83,271,1,0,
        0,0,85,273,1,0,0,0,87,276,1,0,0,0,89,279,1,0,0,0,91,281,1,0,0,0,
        93,283,1,0,0,0,95,286,1,0,0,0,97,289,1,0,0,0,99,292,1,0,0,0,101,
        295,1,0,0,0,103,297,1,0,0,0,105,299,1,0,0,0,107,301,1,0,0,0,109,
        303,1,0,0,0,111,305,1,0,0,0,113,308,1,0,0,0,115,313,1,0,0,0,117,
        118,5,48,0,0,118,119,5,120,0,0,119,121,1,0,0,0,120,122,7,0,0,0,121,
        120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,
        2,1,0,0,0,125,127,3,5,2,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,
        1,0,0,0,128,129,1,0,0,0,129,4,1,0,0,0,130,131,7,1,0,0,131,6,1,0,
        0,0,132,134,3,9,4,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,
        0,0,135,136,1,0,0,0,136,8,1,0,0,0,137,138,7,2,0,0,138,10,1,0,0,0,
        139,140,5,38,0,0,140,141,5,115,0,0,141,142,5,121,0,0,142,143,5,109,
        0,0,143,12,1,0,0,0,144,145,5,38,0,0,145,146,5,114,0,0,146,147,5,
        101,0,0,147,148,5,103,0,0,148,14,1,0,0,0,149,150,5,38,0,0,150,151,
        5,118,0,0,151,152,5,97,0,0,152,153,5,114,0,0,153,154,5,115,0,0,154,
        16,1,0,0,0,155,156,5,38,0,0,156,157,5,109,0,0,157,158,5,101,0,0,
        158,159,5,109,0,0,159,18,1,0,0,0,160,161,5,38,0,0,161,162,5,115,
        0,0,162,163,5,116,0,0,163,164,5,97,0,0,164,165,5,116,0,0,165,166,
        5,101,0,0,166,20,1,0,0,0,167,172,5,34,0,0,168,171,3,23,11,0,169,
        171,8,3,0,0,170,168,1,0,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,
        170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,
        186,5,34,0,0,176,181,5,39,0,0,177,180,3,25,12,0,178,180,8,4,0,0,
        179,177,1,0,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,
        181,182,1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,186,5,39,0,0,
        185,167,1,0,0,0,185,176,1,0,0,0,186,22,1,0,0,0,187,188,5,92,0,0,
        188,189,3,31,15,0,189,24,1,0,0,0,190,191,5,92,0,0,191,192,3,29,14,
        0,192,26,1,0,0,0,193,194,5,98,0,0,194,208,5,39,0,0,195,207,3,31,
        15,0,196,197,5,92,0,0,197,198,5,120,0,0,198,202,1,0,0,0,199,201,
        7,1,0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,
        1,0,0,0,203,207,1,0,0,0,204,202,1,0,0,0,205,207,8,4,0,0,206,195,
        1,0,0,0,206,196,1,0,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,
        1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,
        5,39,0,0,212,28,1,0,0,0,213,214,5,92,0,0,214,215,7,5,0,0,215,30,
        1,0,0,0,216,217,5,92,0,0,217,218,7,6,0,0,218,32,1,0,0,0,219,220,
        5,45,0,0,220,221,5,62,0,0,221,34,1,0,0,0,222,223,5,40,0,0,223,36,
        1,0,0,0,224,225,5,41,0,0,225,38,1,0,0,0,226,227,5,33,0,0,227,40,
        1,0,0,0,228,229,5,38,0,0,229,42,1,0,0,0,230,231,5,36,0,0,231,44,
        1,0,0,0,232,233,5,58,0,0,233,46,1,0,0,0,234,235,5,59,0,0,235,48,
        1,0,0,0,236,237,5,44,0,0,237,50,1,0,0,0,238,239,5,34,0,0,239,52,
        1,0,0,0,240,241,5,39,0,0,241,54,1,0,0,0,242,243,5,64,0,0,243,56,
        1,0,0,0,244,245,5,46,0,0,245,58,1,0,0,0,246,247,5,124,0,0,247,60,
        1,0,0,0,248,249,5,91,0,0,249,62,1,0,0,0,250,251,5,93,0,0,251,64,
        1,0,0,0,252,253,5,123,0,0,253,66,1,0,0,0,254,255,5,125,0,0,255,68,
        1,0,0,0,256,257,5,94,0,0,257,70,1,0,0,0,258,259,5,35,0,0,259,72,
        1,0,0,0,260,261,5,37,0,0,261,74,1,0,0,0,262,263,5,42,0,0,263,76,
        1,0,0,0,264,265,5,43,0,0,265,78,1,0,0,0,266,267,5,47,0,0,267,80,
        1,0,0,0,268,269,5,42,0,0,269,270,5,42,0,0,270,82,1,0,0,0,271,272,
        5,61,0,0,272,84,1,0,0,0,273,274,5,61,0,0,274,275,5,61,0,0,275,86,
        1,0,0,0,276,277,5,33,0,0,277,278,5,61,0,0,278,88,1,0,0,0,279,280,
        5,60,0,0,280,90,1,0,0,0,281,282,5,62,0,0,282,92,1,0,0,0,283,284,
        5,60,0,0,284,285,5,61,0,0,285,94,1,0,0,0,286,287,5,62,0,0,287,288,
        5,61,0,0,288,96,1,0,0,0,289,290,5,38,0,0,290,291,5,38,0,0,291,98,
        1,0,0,0,292,293,5,124,0,0,293,294,5,124,0,0,294,100,1,0,0,0,295,
        296,5,63,0,0,296,102,1,0,0,0,297,298,5,126,0,0,298,104,1,0,0,0,299,
        300,5,96,0,0,300,106,1,0,0,0,301,302,5,95,0,0,302,108,1,0,0,0,303,
        304,5,45,0,0,304,110,1,0,0,0,305,306,3,109,54,0,306,112,1,0,0,0,
        307,309,5,13,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,
        310,311,5,10,0,0,311,114,1,0,0,0,312,314,7,7,0,0,313,312,1,0,0,0,
        314,315,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,116,1,0,0,0,
        14,0,123,128,135,170,172,179,181,185,202,206,208,308,315,0
    ]

class lex(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    HEX_NUMBERS = 1
    NUMBERS = 2
    NUMBER = 3
    LETTERS = 4
    LETTER = 5
    SYM_DB = 6
    REG_DB = 7
    VARS_DB = 8
    MEM_DB = 9
    STATE = 10
    STRING = 11
    ESCAPED_QUOTE = 12
    ESCAPED_SINGLE_QUOTE = 13
    BINARY_STRING = 14
    SESC_SEQ = 15
    ESC_SEQ = 16
    ARROW = 17
    LPAREN = 18
    RPAREN = 19
    BANG = 20
    AMP = 21
    DOLLAR = 22
    COLON = 23
    SCOLON = 24
    COMMA = 25
    QUOTE = 26
    SQUOTE = 27
    AT = 28
    DOT = 29
    BAR = 30
    BRA = 31
    KET = 32
    BRACE = 33
    KETCE = 34
    HAT = 35
    HASH = 36
    PERC = 37
    TIMES = 38
    ADD = 39
    DIV = 40
    POW = 41
    ASSIGN = 42
    EQ = 43
    NEQ = 44
    LT = 45
    GT = 46
    LE = 47
    GE = 48
    AND = 49
    OR = 50
    QMARK = 51
    TILDE = 52
    TICK = 53
    UNDERSCORE = 54
    DASH = 55
    SUB = 56
    NEWLINE = 57
    WS = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'&sym'", "'&reg'", "'&vars'", "'&mem'", "'&state'", "'->'", 
            "'('", "')'", "'!'", "'&'", "'$'", "':'", "';'", "','", "'\"'", 
            "'''", "'@'", "'.'", "'|'", "'['", "']'", "'{'", "'}'", "'^'", 
            "'#'", "'%'", "'*'", "'+'", "'/'", "'**'", "'='", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'?'", "'~'", 
            "'`'", "'_'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", "SYM_DB", 
            "REG_DB", "VARS_DB", "MEM_DB", "STATE", "STRING", "ESCAPED_QUOTE", 
            "ESCAPED_SINGLE_QUOTE", "BINARY_STRING", "SESC_SEQ", "ESC_SEQ", 
            "ARROW", "LPAREN", "RPAREN", "BANG", "AMP", "DOLLAR", "COLON", 
            "SCOLON", "COMMA", "QUOTE", "SQUOTE", "AT", "DOT", "BAR", "BRA", 
            "KET", "BRACE", "KETCE", "HAT", "HASH", "PERC", "TIMES", "ADD", 
            "DIV", "POW", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LE", "GE", 
            "AND", "OR", "QMARK", "TILDE", "TICK", "UNDERSCORE", "DASH", 
            "SUB", "NEWLINE", "WS" ]

    ruleNames = [ "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", 
                  "SYM_DB", "REG_DB", "VARS_DB", "MEM_DB", "STATE", "STRING", 
                  "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", "BINARY_STRING", 
                  "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", "BANG", 
                  "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", 
                  "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", 
                  "HAT", "HASH", "PERC", "TIMES", "ADD", "DIV", "POW", "ASSIGN", 
                  "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "QMARK", 
                  "TILDE", "TICK", "UNDERSCORE", "DASH", "SUB", "NEWLINE", 
                  "WS" ]

    grammarFileName = "lex.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


