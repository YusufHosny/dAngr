# Generated from /workspaces/dAngr/src/dAngr/cli/grammar/lex.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,57,308,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,0,1,0,
        4,0,120,8,0,11,0,12,0,121,1,1,4,1,125,8,1,11,1,12,1,126,1,2,1,2,
        1,3,4,3,132,8,3,11,3,12,3,133,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,5,9,162,8,9,10,9,12,9,165,9,9,1,9,1,9,1,9,1,9,5,9,171,8,9,
        10,9,12,9,174,9,9,1,9,3,9,177,8,9,1,10,1,10,1,10,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,192,8,12,10,12,12,12,195,
        9,12,1,12,5,12,198,8,12,10,12,12,12,201,9,12,1,12,1,12,1,13,1,13,
        1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
        1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,
        1,54,1,55,3,55,300,8,55,1,55,1,55,1,56,4,56,305,8,56,11,56,12,56,
        306,0,0,57,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
        55,111,56,113,57,1,0,8,3,0,48,57,65,70,97,102,1,0,48,57,2,0,65,90,
        97,122,2,0,34,34,92,92,2,0,39,39,92,92,8,0,39,39,48,48,92,92,98,
        98,102,102,110,110,114,114,116,116,8,0,34,34,48,48,92,92,98,98,102,
        102,110,110,114,114,116,116,2,0,9,9,32,32,321,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
        113,1,0,0,0,1,115,1,0,0,0,3,124,1,0,0,0,5,128,1,0,0,0,7,131,1,0,
        0,0,9,135,1,0,0,0,11,137,1,0,0,0,13,142,1,0,0,0,15,147,1,0,0,0,17,
        153,1,0,0,0,19,176,1,0,0,0,21,178,1,0,0,0,23,181,1,0,0,0,25,184,
        1,0,0,0,27,204,1,0,0,0,29,207,1,0,0,0,31,210,1,0,0,0,33,213,1,0,
        0,0,35,215,1,0,0,0,37,217,1,0,0,0,39,219,1,0,0,0,41,221,1,0,0,0,
        43,223,1,0,0,0,45,225,1,0,0,0,47,227,1,0,0,0,49,229,1,0,0,0,51,231,
        1,0,0,0,53,233,1,0,0,0,55,235,1,0,0,0,57,237,1,0,0,0,59,239,1,0,
        0,0,61,241,1,0,0,0,63,243,1,0,0,0,65,245,1,0,0,0,67,247,1,0,0,0,
        69,249,1,0,0,0,71,251,1,0,0,0,73,253,1,0,0,0,75,255,1,0,0,0,77,257,
        1,0,0,0,79,259,1,0,0,0,81,262,1,0,0,0,83,264,1,0,0,0,85,267,1,0,
        0,0,87,270,1,0,0,0,89,272,1,0,0,0,91,274,1,0,0,0,93,277,1,0,0,0,
        95,280,1,0,0,0,97,283,1,0,0,0,99,286,1,0,0,0,101,288,1,0,0,0,103,
        290,1,0,0,0,105,292,1,0,0,0,107,294,1,0,0,0,109,296,1,0,0,0,111,
        299,1,0,0,0,113,304,1,0,0,0,115,116,5,48,0,0,116,117,5,120,0,0,117,
        119,1,0,0,0,118,120,7,0,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,
        119,1,0,0,0,121,122,1,0,0,0,122,2,1,0,0,0,123,125,3,5,2,0,124,123,
        1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,4,1,
        0,0,0,128,129,7,1,0,0,129,6,1,0,0,0,130,132,3,9,4,0,131,130,1,0,
        0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,8,1,0,0,
        0,135,136,7,2,0,0,136,10,1,0,0,0,137,138,5,38,0,0,138,139,5,115,
        0,0,139,140,5,121,0,0,140,141,5,109,0,0,141,12,1,0,0,0,142,143,5,
        38,0,0,143,144,5,114,0,0,144,145,5,101,0,0,145,146,5,103,0,0,146,
        14,1,0,0,0,147,148,5,38,0,0,148,149,5,118,0,0,149,150,5,97,0,0,150,
        151,5,114,0,0,151,152,5,115,0,0,152,16,1,0,0,0,153,154,5,38,0,0,
        154,155,5,109,0,0,155,156,5,101,0,0,156,157,5,109,0,0,157,18,1,0,
        0,0,158,163,5,34,0,0,159,162,3,21,10,0,160,162,8,3,0,0,161,159,1,
        0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,
        0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,177,5,34,0,0,167,172,5,
        39,0,0,168,171,3,23,11,0,169,171,8,4,0,0,170,168,1,0,0,0,170,169,
        1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,
        1,0,0,0,174,172,1,0,0,0,175,177,5,39,0,0,176,158,1,0,0,0,176,167,
        1,0,0,0,177,20,1,0,0,0,178,179,5,92,0,0,179,180,3,29,14,0,180,22,
        1,0,0,0,181,182,5,92,0,0,182,183,3,27,13,0,183,24,1,0,0,0,184,185,
        5,98,0,0,185,199,5,39,0,0,186,198,3,29,14,0,187,188,5,92,0,0,188,
        189,5,120,0,0,189,193,1,0,0,0,190,192,7,1,0,0,191,190,1,0,0,0,192,
        195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,198,1,0,0,0,195,
        193,1,0,0,0,196,198,8,4,0,0,197,186,1,0,0,0,197,187,1,0,0,0,197,
        196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,
        202,1,0,0,0,201,199,1,0,0,0,202,203,5,39,0,0,203,26,1,0,0,0,204,
        205,5,92,0,0,205,206,7,5,0,0,206,28,1,0,0,0,207,208,5,92,0,0,208,
        209,7,6,0,0,209,30,1,0,0,0,210,211,5,45,0,0,211,212,5,62,0,0,212,
        32,1,0,0,0,213,214,5,40,0,0,214,34,1,0,0,0,215,216,5,41,0,0,216,
        36,1,0,0,0,217,218,5,33,0,0,218,38,1,0,0,0,219,220,5,38,0,0,220,
        40,1,0,0,0,221,222,5,36,0,0,222,42,1,0,0,0,223,224,5,58,0,0,224,
        44,1,0,0,0,225,226,5,59,0,0,226,46,1,0,0,0,227,228,5,44,0,0,228,
        48,1,0,0,0,229,230,5,34,0,0,230,50,1,0,0,0,231,232,5,39,0,0,232,
        52,1,0,0,0,233,234,5,64,0,0,234,54,1,0,0,0,235,236,5,46,0,0,236,
        56,1,0,0,0,237,238,5,124,0,0,238,58,1,0,0,0,239,240,5,91,0,0,240,
        60,1,0,0,0,241,242,5,93,0,0,242,62,1,0,0,0,243,244,5,123,0,0,244,
        64,1,0,0,0,245,246,5,125,0,0,246,66,1,0,0,0,247,248,5,94,0,0,248,
        68,1,0,0,0,249,250,5,35,0,0,250,70,1,0,0,0,251,252,5,37,0,0,252,
        72,1,0,0,0,253,254,5,42,0,0,254,74,1,0,0,0,255,256,5,43,0,0,256,
        76,1,0,0,0,257,258,5,47,0,0,258,78,1,0,0,0,259,260,5,42,0,0,260,
        261,5,42,0,0,261,80,1,0,0,0,262,263,5,61,0,0,263,82,1,0,0,0,264,
        265,5,61,0,0,265,266,5,61,0,0,266,84,1,0,0,0,267,268,5,33,0,0,268,
        269,5,61,0,0,269,86,1,0,0,0,270,271,5,60,0,0,271,88,1,0,0,0,272,
        273,5,62,0,0,273,90,1,0,0,0,274,275,5,60,0,0,275,276,5,61,0,0,276,
        92,1,0,0,0,277,278,5,62,0,0,278,279,5,61,0,0,279,94,1,0,0,0,280,
        281,5,38,0,0,281,282,5,38,0,0,282,96,1,0,0,0,283,284,5,124,0,0,284,
        285,5,124,0,0,285,98,1,0,0,0,286,287,5,63,0,0,287,100,1,0,0,0,288,
        289,5,126,0,0,289,102,1,0,0,0,290,291,5,96,0,0,291,104,1,0,0,0,292,
        293,5,95,0,0,293,106,1,0,0,0,294,295,5,45,0,0,295,108,1,0,0,0,296,
        297,3,107,53,0,297,110,1,0,0,0,298,300,5,13,0,0,299,298,1,0,0,0,
        299,300,1,0,0,0,300,301,1,0,0,0,301,302,5,10,0,0,302,112,1,0,0,0,
        303,305,7,7,0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,
        306,307,1,0,0,0,307,114,1,0,0,0,14,0,121,126,133,161,163,170,172,
        176,193,197,199,299,306,0
    ]

class lex(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    HEX_NUMBERS = 1
    NUMBERS = 2
    NUMBER = 3
    LETTERS = 4
    LETTER = 5
    SYM_DB = 6
    REG_DB = 7
    VARS_DB = 8
    MEM_DB = 9
    STRING = 10
    ESCAPED_QUOTE = 11
    ESCAPED_SINGLE_QUOTE = 12
    BINARY_STRING = 13
    SESC_SEQ = 14
    ESC_SEQ = 15
    ARROW = 16
    LPAREN = 17
    RPAREN = 18
    BANG = 19
    AMP = 20
    DOLLAR = 21
    COLON = 22
    SCOLON = 23
    COMMA = 24
    QUOTE = 25
    SQUOTE = 26
    AT = 27
    DOT = 28
    BAR = 29
    BRA = 30
    KET = 31
    BRACE = 32
    KETCE = 33
    HAT = 34
    HASH = 35
    PERC = 36
    TIMES = 37
    ADD = 38
    DIV = 39
    POW = 40
    ASSIGN = 41
    EQ = 42
    NEQ = 43
    LT = 44
    GT = 45
    LE = 46
    GE = 47
    AND = 48
    OR = 49
    QMARK = 50
    TILDE = 51
    TICK = 52
    UNDERSCORE = 53
    DASH = 54
    SUB = 55
    NEWLINE = 56
    WS = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'&sym'", "'&reg'", "'&vars'", "'&mem'", "'->'", "'('", "')'", 
            "'!'", "'&'", "'$'", "':'", "';'", "','", "'\"'", "'''", "'@'", 
            "'.'", "'|'", "'['", "']'", "'{'", "'}'", "'^'", "'#'", "'%'", 
            "'*'", "'+'", "'/'", "'**'", "'='", "'=='", "'!='", "'<'", "'>'", 
            "'<='", "'>='", "'&&'", "'||'", "'?'", "'~'", "'`'", "'_'", 
            "'-'" ]

    symbolicNames = [ "<INVALID>",
            "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", "SYM_DB", 
            "REG_DB", "VARS_DB", "MEM_DB", "STRING", "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", 
            "BINARY_STRING", "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", 
            "BANG", "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", 
            "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", 
            "HAT", "HASH", "PERC", "TIMES", "ADD", "DIV", "POW", "ASSIGN", 
            "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", 
            "TICK", "UNDERSCORE", "DASH", "SUB", "NEWLINE", "WS" ]

    ruleNames = [ "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", 
                  "SYM_DB", "REG_DB", "VARS_DB", "MEM_DB", "STRING", "ESCAPED_QUOTE", 
                  "ESCAPED_SINGLE_QUOTE", "BINARY_STRING", "SESC_SEQ", "ESC_SEQ", 
                  "ARROW", "LPAREN", "RPAREN", "BANG", "AMP", "DOLLAR", 
                  "COLON", "SCOLON", "COMMA", "QUOTE", "SQUOTE", "AT", "DOT", 
                  "BAR", "BRA", "KET", "BRACE", "KETCE", "HAT", "HASH", 
                  "PERC", "TIMES", "ADD", "DIV", "POW", "ASSIGN", "EQ", 
                  "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", 
                  "TICK", "UNDERSCORE", "DASH", "SUB", "NEWLINE", "WS" ]

    grammarFileName = "lex.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


